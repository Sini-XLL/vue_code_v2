{"ast":null,"code":"// 拦截器\nimport axios from 'axios';\nimport { useStore } from 'vuex';\nimport { getToken } from './app';\n// 创建axios,赋值给变量service\n// const BASEURL=process.env.MODE_ENV==='production'?'':'/devApi';\nconst service = axios.create({\n  // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n  //   baseURL: BASEURL,//转换成的api eg:http://localhost:8000/api== 我们所要请求的api\n  baseURL: '/devApi',\n  timeout: 1000 //超时，请求时间超过，无法再做请求，尽可能设置长一点时间\n});\n\n// 添加请求拦截器\nservice.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  // 后端需要前端创相关参数（在请求头添加相关参数)\n  // Token\n  // userid\n  // console.log(\"添加请求\");\n  // console.log(config.headers);\n  // 业务需求\n\n  // 最终目的在请求头添加参数\n  const store = useStore();\n  const token = getToken();\n  config.headers.Authorization = token;\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\nservice.interceptors.response.use(function (response) {\n  // 对响应数据做点什么 \n  // 业务需求\n  // let data=response.data\n  // if (data.msg!==0) { //后面数据修改\n  //   console.log(data.msg);\n  //   ElMessage('This is a message.')\n  // console.log(\"有问题\");\n  // 如果有问题返回错误的数据回去\n  //   return Promise.reject(data);\n  // }else{\n  console.log(\"拦截器成功\");\n  return response.data; //==>return Promise.resolve(data)\n  // }\n}, function (error) {\n  // 对响应错误做点什么\n  console.log(\"拦截器错误\");\n  return Promise.reject(error);\n});\nexport default service;\n// 使用export default时 但不能同时存在多个default \n// 文件import 不需要花括号\n// 如果只用export 文件import 需要花括号","map":{"version":3,"names":["axios","useStore","getToken","service","create","baseURL","timeout","interceptors","request","use","config","store","token","headers","Authorization","error","Promise","reject","response","console","log","data"],"sources":["D:/graduate_design/project/movieweb/MovieClient/movieclient/src/utils/request.js"],"sourcesContent":["// 拦截器\r\nimport axios from 'axios'\r\nimport { useStore } from 'vuex';\r\nimport { getToken } from './app';\r\n// 创建axios,赋值给变量service\r\n// const BASEURL=process.env.MODE_ENV==='production'?'':'/devApi';\r\nconst service=axios.create({\r\n// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\r\n//   baseURL: BASEURL,//转换成的api eg:http://localhost:8000/api== 我们所要请求的api\r\n  baseURL:'/devApi',\r\n  timeout:1000,//超时，请求时间超过，无法再做请求，尽可能设置长一点时间\r\n})\r\n\r\n// 添加请求拦截器\r\nservice.interceptors.request.use(function (config) {\r\n    // 在发送请求之前做些什么\r\n    // 后端需要前端创相关参数（在请求头添加相关参数)\r\n    // Token\r\n    // userid\r\n    // console.log(\"添加请求\");\r\n    // console.log(config.headers);\r\n    // 业务需求\r\n\r\n    // 最终目的在请求头添加参数\r\n    const store=useStore()\r\n    const token=getToken()\r\n    config.headers.Authorization=token\r\n\r\n    return config;\r\n  }, function (error) {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error);\r\n  });\r\n\r\n// 添加响应拦截器\r\nservice.interceptors.response.use(function (response) {\r\n    // 对响应数据做点什么 \r\n    // 业务需求\r\n    // let data=response.data\r\n    // if (data.msg!==0) { //后面数据修改\r\n    //   console.log(data.msg);\r\n    //   ElMessage('This is a message.')\r\n      // console.log(\"有问题\");\r\n      // 如果有问题返回错误的数据回去\r\n    //   return Promise.reject(data);\r\n    // }else{\r\n    console.log(\"拦截器成功\");\r\n      \r\n      return response.data;//==>return Promise.resolve(data)\r\n    // }\r\n    \r\n  }, function (error) {\r\n    // 对响应错误做点什么\r\n    console.log(\"拦截器错误\");\r\n    return Promise.reject(error);\r\n  });\r\n  \r\nexport default service;\r\n// 使用export default时 但不能同时存在多个default \r\n// 文件import 不需要花括号\r\n// 如果只用export 文件import 需要花括号"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,QAAQ,QAAQ,OAAO;AAChC;AACA;AACA,MAAMC,OAAO,GAACH,KAAK,CAACI,MAAM,CAAC;EAC3B;EACA;EACEC,OAAO,EAAC,SAAS;EACjBC,OAAO,EAAC,IAAI,CAAC;AACf,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;EAC/C;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMC,KAAK,GAACV,QAAQ,CAAC,CAAC;EACtB,MAAMW,KAAK,GAACV,QAAQ,CAAC,CAAC;EACtBQ,MAAM,CAACG,OAAO,CAACC,aAAa,GAACF,KAAK;EAElC,OAAOF,MAAM;AACf,CAAC,EAAE,UAAUK,KAAK,EAAE;EAClB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEJ;AACAZ,OAAO,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAAC,UAAUS,QAAQ,EAAE;EAClD;EACA;EACA;EACA;EACA;EACA;EACE;EACA;EACF;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EAElB,OAAOF,QAAQ,CAACG,IAAI,CAAC;EACvB;AAEF,CAAC,EAAE,UAAUN,KAAK,EAAE;EAClB;EACAI,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpB,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEJ,eAAeZ,OAAO;AACtB;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}